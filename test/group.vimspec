Describe group

  Before
    call ResetSettings()
  End

  Describe #Register
    It registers user defined lighter
      let g:high_lighters = {'custom': {'hlgroup': 'Normal'}}
      call high#group#Register('custom')
      Assert Equals(high#group#GetSettings('custom')['hlgroup'], 'Normal')
    End

    It registers autoloaded lighter
      call high#group#Register('mixed_eol')
      Assert Equals(high#group#GetSettings('mixed_eol')['pattern'], '\r')
    End

    It registers passed settings as a new lighter
      call high#group#Register('passed', {'hlgroup': 'Normal'})
      Assert Equals(high#group#GetSettings('passed')['hlgroup'], 'Normal')
    End

    It fails if lighter settings are not defined at all
      Throws /\[high\] No such group: not_exists/ high#group#Register('not_exists')
    End

    It applies customization
      let g:high_lighters = {'mixed_eol': {'hlgroup': 'Normal'}}
      call high#group#Register('mixed_eol')
      Assert Equals(high#group#GetSettings('mixed_eol')['hlgroup'], 'Normal')
    End
  End

  Describe #Init
    It calls the init function of autoloaded groups
      call high#group#Register('mixed_eol')
      Assert Empty(high#group#GetMembers('mixed_eol'))
      call high#group#Init('mixed_eol')
      Assert NotEmpty(high#group#GetMembers('mixed_eol'))
    End
  End

  Describe #IsEnabledForFiletype
    Before
      let group = high#group#Register('group', {})
    End

    It enabled for every filetype by default
      let group.whitelist = []
      let group.blacklist = []
      Assert Equals(high#group#IsEnabledForFiletype(group, 'text'), 1)
      Assert Equals(high#group#IsEnabledForFiletype(group, 'asciidoc'), 1)
    End

    It enabled only for whitelisted filetypes
      let group.whitelist = ['text']
      let group.blacklist = []
      Assert Equals(high#group#IsEnabledForFiletype(group, 'text'), 1)
      Assert Equals(high#group#IsEnabledForFiletype(group, 'asciidoc'), 0)
    End

    It disabled only for blacklisted filetypes
      let group.whitelist = []
      let group.blacklist = ['text']
      Assert Equals(high#group#IsEnabledForFiletype(group, 'text'), 0)
      Assert Equals(high#group#IsEnabledForFiletype(group, 'asciidoc'), 1)
    End

    It disabled for both blacklisted and whitelisted filetypes
      let group.whitelist = ['text']
      let group.blacklist = ['text']
      Assert Equals(high#group#IsEnabledForFiletype(group, 'text'), 0)
    End
  End

End

  " Describe #manualHighlight
  "   It adds a match for pattern
  "     let lighter.pattern = 'regex'
  "     call high#group#AddMember(lighter)
  "     call high#LightGroup(lighter, 1)
  "     Assert Equals(len(getmatches()), 1)
  "     Assert Equals(getmatches()[0].id, high#match#GetID(lighter))
  "     Assert Equals(getmatches()[0].pattern, lighter.pattern)
  "   End
  "
  "   It removes the match of pattern
  "     let lighter.pattern = 'regex'
  "     call high#group#AddMember(lighter)
  "     call high#LightGroup(lighter, 1)
  "     call high#LightGroup(lighter, 0)
  "     Assert Empty(getmatches())
  "     Assert Equals(high#match#GetID(lighter), -1)
  "   End
  " End
  "
  " Describe #addLighter
  "   It adds the lighter to the list of loaded ones
  "     Assert Empty(high#group#GetMembers(lighter.group_name))
  "     call high#group#AddMember(lighter)
  "     Assert LengthOf(g:high.group_members, 1)
  "     Assert HasKey(g:high.group_members, 'test')
  "     Assert LengthOf(high#group#GetMembers(lighter.group_name), 1)
  "     Assert Same(high#group#GetMembers(lighter.group_name)[0], lighter)
  "   End
  "
  "   It can add more lighters to the same group
  "     let group = high#group#Register('group')
  "     Assert Empty(high#group#GetMembers(group.group_name))
  "     let a = high#utils#Clone(group)
  "     let a.pattern = 'pattern a'
  "     call high#group#AddMember(a)
  "     let b = high#utils#Clone(group)
  "     let b.pattern = 'pattern b'
  "     call high#group#AddMember(b)
  "     Assert LengthOf(g:high.group_members, 1)
  "     Assert HasKey(g:high.group_members, 'group')
  "     Assert LengthOf(g:high.group_members['group'], 2)
  "     Assert Same(g:high.group_members['group'][0], a)
  "     Assert Same(g:high.group_members['group'][1], b)
  "   End
  " End
  "
