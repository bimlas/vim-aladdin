function! ExampleForTrue(group_settings)
  return 1
endfunction

function! ExampleForFalse(group_settings)
  return 0
endfunction

Describe high#group
  Before
    call ResetSettings()
  End

  Describe #Register
    It registers user defined group
      let g:high_lighters = {'custom': {'hlgroup': 'Normal'}}
      call high#group#Register('custom')
      Assert Equals(high#group#GetSettings('custom')['hlgroup'], 'Normal')
    End

    It registers autoloaded group
      call high#group#Register('mixed_eol')
      Assert Equals(high#group#GetSettings('mixed_eol')['pattern'], '\r')
    End

    It registers passed settings as a new group
      call high#group#Register('passed', {'hlgroup': 'Normal'})
      Assert Equals(high#group#GetSettings('passed')['hlgroup'], 'Normal')
    End

    It fails if group settings are not defined at all
      Throws /\[high\] No such group: not_exists/ high#group#Register('not_exists')
    End

    It applies customization
      let g:high_lighters = {'mixed_eol': {'hlgroup': 'Normal'}}
      call high#group#Register('mixed_eol')
      Assert Equals(high#group#GetSettings('mixed_eol')['hlgroup'], 'Normal')
    End
  End

  Describe #LoadSettings
    It returns the settings of user defined group
      let g:high_lighters = {'custom': {'hlgroup': 'Normal'}}
      Assert Equals(high#group#LoadSettings('custom')['hlgroup'], 'Normal')
    End

    It returns the settings of autoloaded group
      call high#group#Register('mixed_eol')
      Assert Equals(high#group#LoadSettings('mixed_eol')['pattern'], '\r')
    End

    It fails if group settings are not defined at all
      Throws /\[high\] No such group: not_exists/ high#group#LoadSettings('not_exists')
    End

    It applies customization
      let g:high_lighters = {'mixed_eol': {'hlgroup': 'Normal'}}
      Assert Equals(high#group#LoadSettings('mixed_eol')['hlgroup'], 'Normal')
    End
  End

  Describe #Init
    It calls the init function of autoloaded groups
      call high#group#Register('mixed_eol')
      Assert Empty(high#group#GetMembers('mixed_eol'))
      call high#group#Init('mixed_eol')
      Assert NotEmpty(high#group#GetMembers('mixed_eol'))
    End

    It adds a lighter if the group has no init function
      call high#group#Register('user_defined', {})
      Assert Empty(high#group#GetMembers('user_defined'))
      call high#group#Init('user_defined')
      Assert LengthOf(high#group#GetMembers('user_defined'), 1)
    End
  End

  Describe #AddMember
    Before
      let group = high#group#Register('group', {})
      call high#group#Init('group')
      let lighter = high#utils#Clone(group)
    End

    It adds a lighter to the group
      Assert LengthOf(high#group#GetMembers('group'), 1)
      call high#group#AddMember(lighter)
      Assert LengthOf(high#group#GetMembers('group'), 2)
      Assert Same(high#group#GetMembers('group')[1], lighter)
    End

    It can add more lighters to the same group
      Assert LengthOf(high#group#GetMembers('group'), 1)
      let a = high#utils#Clone(group)
      let a.pattern = 'pattern a'
      call high#group#AddMember(a)
      let b = high#utils#Clone(group)
      let b.pattern = 'pattern b'
      call high#group#AddMember(b)
      Assert LengthOf(g:high.group_members['group'], 3)
      Assert Same(high#group#GetMembers('group')[1], a)
      Assert Same(high#group#GetMembers('group')[2], b)
    End
  End

  Describe #IsRegistered
    It checks that group is registered
      Assert False(high#group#IsRegistered('group'))
      call high#group#Register('group', {})
      Assert True(high#group#IsRegistered('group'))
    End
  End

  Describe #IsInitialized
    It checks that group initialization is done
      call high#group#Register('mixed_eol')
      Assert False(high#group#IsInitialized('mixed_eol'))
      call high#group#Init('mixed_eol')
      Assert True(high#group#IsInitialized('mixed_eol'))
    End
  End

  Describe #IsEnabled
    It checks that white/blacklist and the group itself is enabled
      let group = high#group#Register('group', {'whitelist': ['typeA'], 'enabled': 1})
      set filetype=typeA
      let group.enabled = 1
      Assert True(high#group#IsEnabled(group))
      set filetype=typeB
      let group.enabled = 1
      Assert False(high#group#IsEnabled(group))
      set filetype=typeA
      let group.enabled = 0
      Assert False(high#group#IsEnabled(group))
    End
  End

  Describe #IsEnabledForFiletype
    Before
      let group = high#group#Register('group', {})
    End

    It enabled for every filetype by default
      let group.whitelist = []
      let group.blacklist = []
      Assert Equals(high#group#IsEnabledForFiletype(group, 'text'), 1)
      Assert Equals(high#group#IsEnabledForFiletype(group, 'asciidoc'), 1)
    End

    It enabled only for whitelisted filetypes
      let group.whitelist = ['text']
      let group.blacklist = []
      Assert Equals(high#group#IsEnabledForFiletype(group, 'text'), 1)
      Assert Equals(high#group#IsEnabledForFiletype(group, 'asciidoc'), 0)
    End

    It disabled only for blacklisted filetypes
      let group.whitelist = []
      let group.blacklist = ['text']
      Assert Equals(high#group#IsEnabledForFiletype(group, 'text'), 0)
      Assert Equals(high#group#IsEnabledForFiletype(group, 'asciidoc'), 1)
    End

    It disabled for both blacklisted and whitelisted filetypes
      let group.whitelist = ['text']
      let group.blacklist = ['text']
      Assert Equals(high#group#IsEnabledForFiletype(group, 'text'), 0)
    End
  End

  Describe #HaveToUpdate
    It returns false if the group does not have update function
      let group = high#group#Register('group', {})
      Assert False(high#group#HaveToUpdate(group))
    End

    It returns with the return value of update function
      let group = high#group#Register('group', {})
      let group.__update_function = function('ExampleForFalse')
      Assert False(high#group#HaveToUpdate(group))
      let group.__update_function = function('ExampleForTrue')
      Assert True(high#group#HaveToUpdate(group))
    End
  End
End
